Object Relationships:

Employee Management App:

Employee: Employee id, name, address, phone, email, city, department id, dept name, dept head, salary, CTC

Department

Project

Salary Details

Types of relationships in general:

1. One to one
2. One to many(many to one)
3. Many to many

Types of relationships in salesforce:

1. One to Many : In salesforce, we can create one to many relationship between the objects using below 2 types of relationship fields. 
--> Lookup relationship : It is used in general.
--> Master-detail relationship : 

One to many relationship is also known as Parent-Child Relationship

Employee  

Project 

One Project and Many employees
One --> Parent Object --> Project
Many --> Child Object --> Employee

Many Projects and many employees

One Employee and many projects--> 

Note --> Relationship field is always created on the child object.
We have 2 types of relationship fields: 
	--> Lookup relationship field 
	--> Master-detail relationship field

Project and Employee1

Project --> Parent object
Employee1 --> Child object

Differences between Lookup and master detail relationship:

1. The lookup relationship field is not a required field where as master detail is a required field.
2. Master-detail is tightly coupled and hence the child object is completely dependent on the parent object in master-detail relationship where as lookup relationship is loosely coupled and hence the child object is not completely dependent on parent object.
3. In master-detail, the owner of the parent object is the owner of the child object where as in lookup, the owner of the parent and child object can be different.
4. In master-detail, if we delete the parent record then its related child record will also get deleted automatically where as in lookup, if we delete the parent record, the related child record will not get deleted but only the relationship field will get empty.
5. In master-detail, we can create the roll up summary field where as in lookup we cannot create roll up summary field.

Note: We can create 40 relationship fields in any custom object. Out of 40, only 2 can be master-detail relationship, remaining 38 will be lookup. 

Recruiting App: Custom App : Will be used by the Recruitment team of any organization to recruit candidates for their open positions. 

Position object --> The recruitment team will store the details of the new positions in the organization. 

Salesforce Developer --> 

Candidate object --> 

Job Application Object-->

Interviewer object

Review Object

Job Posting

Job Posting Site

Offer Object

Many to many relationship:

Many Employees and many Projects

Create an intermediate object, called junction object. On the junction object, we create 2 master-detail relationships, one with the employee object and one with the project object.

position --> 
job posting site

Create a many to many relationship between position and job posting site.

Job posting --> junction object, we will create 2 master-detail relationships here, one with position and one with job posting site.

Purpose of Schema Builder:
1. It is used to visualize the data model of any app on a single page.
2. It is used to create objects, fields and relationship fields in a single step.

Page Layouts: We can customize the layout of any object with the help of Page layouts. 

1. We can organize the fields according to the requirements.
2. We can create sections and organize the fields in different sections.
3. We can make the field as 'required' from the page layout.
4. WE can create custom buttons and add it to the layout.
5. We can organize the related lists.
6. We can hide the fields/related lists from the layout. 

Senior Manager --> 
Manager
Analyst --> want to hide Priority, salary and education field

Formula Field: 

Example of a Cross object formula field.

Create a checkbox field 'Immediate Required' on the position object and a picklist field 'Notice Period' with values (15 days, 30 days, 60 days) on the candidate.

Create a formula field on the candidate object 'Recommend for Hire' with 'Text' return type. It can have values either 'Yes' or 'No'.

Create a lookup relationship on the candidate object with position object.








Many to many relationship(Junction object)
Lookup filter


--> conversion of master-detail to lookup relationship. 
	To convert master-detail to lookup, the rollup summary field should not be there on the master object.

--> Conversion of lookup to master-detail relationship.
	To convert lookup to master-detail, the relationship field should not be empty in any of the child object records.
Roll Up Summary Field : 
--> This field can only be created on the object which has master-detail relationship.
--> It is a read-only field.
--> It is created on the master(parent) object.

Master-detail relationship --> Parent-child relationship

Master object --> Parent object
Detail object --> Child object

It is used to summarize(or aggregate) the detail object records.

Count()
Sum()
Max()
Min()


Employee --> 50 employees

Department --> 12 employees are in IT dept, 15 in Sales dept, 15 in Finance dept, 8 in HR dept

Regular Expressions: It is used to create a pattern in which we want the user to enter values in the fields using some pre-defined symbols.

In salesforce, we have a REGEX() function, in which we can give the regular expression.

Regular expressions can be applied only on Text fields.

Position Title field --> we should have only alphabets. 

	A-Z , a-z

Symbols of Regular Expression:

1. [] --> [A-Z a-z]--> here we write whatever we want to allow to be entered in the field. It will only allow a single character from the whole range of alphabets.

To allow more than one character, we have to use below 3 symbols.

2. + --> [A-Z a-z]+ --> It will allow one or more characters. 
3. * --> [A-Z a-z]* --> It will allow zero or more characters.
4. ? --> [A-Z a-z]? --> It will allow zero or one character.

Position Title Field --> [A-Za-z ]+

Using above 3 symbols +, *, ?, the number of characters are not fixed.

5. {} --> [A-Za-z ]{4}





























































































































2. Many to many













